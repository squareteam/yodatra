{"name":"Yodatra","tagline":"Yodatra is a minimalistic framework built on top of Sinatra","body":"### Welcome to Yodatra\r\n\r\nBackend development you shall do. And yodatra you shall use.\r\nA minimalistic framework built on top of Sinatra it is. The power of ActiveRecord it provides you. And all sort of small helpers.\r\n\r\n### What it also provides for free\r\n\r\n- __Logger__: Logs inside ```<your_project>/log``` in an environment named file ```env.err.log``` for all errors and ```env.log``` only for access logs.\r\n- __Boot__: loads automaticaly all ```<your_project>/app/models/**/*.rb``` files and ```<your_project>/app/controllers/**/*.rb``` files. Establish a connection with a database by reading the ```<your_project>/config/database.yml``` file \r\n\r\nFor that create a sinatra app that inherits from ```Yodatra::Base``` instead of ```Sinatra::Base```.\r\n\r\n### Instantly deploy your API\r\n\r\nBased on your ActiveRecord models an API will be exposed very simply.\r\nA ```ModelsController``` for that is done which you'll need to inherit from for each resource you want to expose.\r\nSee [rubydoc for ModelsController features](http://rubydoc.info/github/squareteam/yodatra/master/Yodatra/ModelsController)\r\n\r\n### Other useful modules\r\n\r\n- __Throttling__: To fight against the dark side, an API throttling you will need. Example: allow only 10 requests/minute per IP: \r\n```ruby\r\nuse Yodatra::Throttle, {:redis_conf => {}, :rpm => 10}\r\n```\r\n_warning: this module requires redis_\r\n- __ApiFormatter__:  this middleware will help you to format all your replies. Example: wrap all you replies within a ```{data: <...>}``` object:\r\n```ruby\r\nuse Yodatra::ApiFormatter do |status, headers, response|\r\n  body = response.empty? ? '' : response.first\r\n  response = [{:data => body}]\r\n  [status, headers, response]\r\nend\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}