{"name":"Yodatra","tagline":"Yodatra is a minimalistic framework built on top of Sinatra","body":"# Welcome to Yodatra\r\n\r\nBackend development you shall do. And yodatra you shall use.\r\nA minimalistic framework built on top of Sinatra it is. The power of ActiveRecord it provides you. And all sort of small helpers.\r\n\r\n## Instantly deploy your API\r\n\r\nBased on your ActiveRecord models an API will be exposed very simply.\r\nFor every resource you want to expose, you will need to create a controller that inherits from the ```Yodatra::ModelsController```.\r\n\r\nFor example, given a `User` model\r\n```ruby\r\nclass User < ActiveRecord::Base\r\n# Your model definition\r\nend\r\n```\r\n\r\nCreating a controller as simple as\r\n```ruby\r\nclass UsersController < Yodatra::ModelsController\r\n  # limit read_scope\r\n  def read_scope\r\n    { only: [:id, :name] }\r\n  end\r\n\r\n  # whitelist assignable attributes\r\n  def user_params\r\n    params.permit(:name)\r\n  end\r\nend\r\n```\r\nwill expose all these routes:\r\n\r\n```\r\nGET /users\r\n```\r\n\r\n> retrieves all users _(attributes exposed are limited by the `read_scope` method defined in the controller)_\r\n\r\n```\r\nGET /users/:id\r\n```\r\n\r\n> retrieves a user _(attributes exposed are limited by the `read_scope` method defined in the controller)_\r\n\r\n```\r\nPOST /users\r\n```\r\n\r\n> creates a user _(attributes assignable are limited by the `user_params` method defined in the controller as advised here http://guides.rubyonrails.org/action_controller_overview.html#strong-parameters)_\r\n\r\n```\r\nPUT /users/:id\r\n```\r\n\r\n> updates a user _(attributes assignable are limited by the `user_params` method defined in the controller as advised here http://guides.rubyonrails.org/action_controller_overview.html#strong-parameters)_\r\n\r\n```\r\nDELETE /users/:id\r\n```\r\n\r\n> deletes a user\r\n\r\n\r\nIf your model is referenced by another model (with a `has_many`, `has_one` or `belongs_to` relationship), nested routes are also created for you. And you don't need to worry about the references/joins, they are done automaticaly!\r\n\r\nFor example, imagine a `Team` model that has many `User`s\r\n```ruby\r\nclass Team < ActiveRecord::Base\r\n  has_many :users\r\nend\r\n```\r\n\r\nthe following routes will be exposed by the `UsersController` controller:\r\n```\r\nGET /team/:team_id/users\r\n```\r\n```\r\nGET /team/:team_id/users/:id\r\n```\r\n```\r\nPOST /team/:team_id/users\r\n```\r\n```\r\nPUT /team/:team_id/users/:id\r\n```\r\n```\r\nDESTROY /team/:team_id/users/:id\r\n```\r\n\r\n### Note\r\nYou can disable __any__ of these actions by using the __::disable__ class method and providing the list of actions you want to disable\r\n```ruby\r\nclass UsersController < Yodatra::ModelsController\r\n  disable :read, :update, :delete, :nested_read_all, :nested_delete\r\nend\r\n```\r\n\r\n### Extra\r\nYou can enable a special \"search\" action by using the __::enable_search_on__ class method\r\n```ruby\r\nclass UsersController < Yodatra::ModelsController\r\n  enable_search_on :name\r\nend\r\n```\r\n\r\n## What it also provides for free\r\n\r\n- __Logger__: Logs inside ```<your_project>/log``` in an environment named file ```env.err.log``` for all errors and ```env.log``` only for access logs.\r\n- __Boot__: loads automaticaly all ```<your_project>/app/models/**/*.rb``` files and ```<your_project>/app/controllers/**/*.rb``` files. Establish a connection with a database by reading the ```<your_project>/config/database.yml``` file \r\n\r\nFor that create a sinatra app that inherits from ```Yodatra::Base``` instead of ```Sinatra::Base```.\r\n\r\n## Other useful modules\r\n\r\n- __Throttling__: To fight against the dark side, an API throttling you will need. Example: allow only 10 requests/minute per IP: \r\n```ruby\r\nuse Yodatra::Throttle, {:redis_conf => {}, :rpm => 10}\r\n```\r\n_warning: this module requires redis_\r\n- __ApiFormatter__:  this middleware will help you to format all your replies. Example: wrap all you replies within a ```{data: <...>}``` object:\r\n```ruby\r\nuse Yodatra::ApiFormatter do |status, headers, response|\r\n  body = response.empty? ? '' : response.first\r\n  response = [{:data => body}]\r\n  [status, headers, response]\r\nend\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}